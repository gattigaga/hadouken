{"version":3,"sources":["components/Board.js","components/CreateBoard.js","components/Button.js","components/ModalCreateBoard.js","store/actionCreators.js","store/actions.js","pages/Home.js","components/List.js","components/Card.js","components/CreateList.js","pages/BoardDetail.js","components/Check.js","components/Progress.js","pages/CardDetail.js","store/reducers.js","store/store.js","App.js","index.js"],"names":["Container","styled","div","Name","p","StyledLink","Link","Board","name","to","Label","CreateBoard","onClick","Content","button","color","chroma","brighten","hex","Button","className","label","isDisabled","disabled","defaultProps","Input","input","Icon","FontAwesomeIcon","modalStyles","overlay","background","content","border","width","padding","margin","Modal","setAppElement","ModalCreateBoard","isOpen","onClickCreate","onClickClose","useState","boardName","setBoardName","refInput","useRef","style","onRequestClose","onAfterOpen","current","focus","contentLabel","ref","type","value","onChange","event","target","onKeyDown","keyCode","autoComplete","icon","faTimes","updateBoard","id","payload","deleteList","updateCard","data","validData","forEach","key","undefined","deleteCard","createCheck","cardId","uuid","isChecked","timestamp","Date","now","updateCheck","deleteCheck","Wrapper","Title","h1","BoardList","Home","isCreateOpen","setIsCreateOpen","boards","useSelector","state","dispatch","useDispatch","Helmet","map","board","slug","toLowerCase","replace","createBoard","Header","Footer","h2","FooterButton","Text","ApplyButton","NewCard","textarea","CloseButton","darken","List","index","children","isWillAdd","isWillUpdateName","onNameUpdated","onClickName","onClickAdd","onClickApplyAdd","onClickCancelAdd","newCard","setNewCard","newName","setNewName","refInputName","refInputNewCard","useEffect","autosize","select","draggableId","provided","innerRef","draggableProps","dragHandleProps","stopPropagation","droppableId","droppableProps","placeholder","setTimeout","faPlus","IconDescription","IconWrapper","IconCheckWrapper","isCompleted","CheckValue","Card","totalChecked","maxChecklist","hasDescription","hasChecklist","faList","faCheckSquare","CreateList","setName","size","ListWrapper","header","machine","Machine","initial","states","idle","on","CREATE_LIST","UPDATE_BOARD_NAME","CREATE_CARD","actions","assign","listId","_","UPDATE_LIST_NAME","createList","IDLE","createCard","updateListName","updateBoardName","BoardDetail","lists","cards","checks","history","useHistory","boardSlug","useParams","useMachine","send","isUpdateBoardName","matches","find","currentLists","filter","list","boardId","sort","a","b","newBoardName","setNewBoardName","onBlur","faHome","goBack","card","check","onDragEnd","result","source","destination","isSameList","isSameIndex","moveList","moveCard","direction","currentCards","newListName","updateList","cardName","action","description","context","currentChecks","length","listName","Checkbox","LabelWrapper","Row","Textarea","Check","isWillUpdateLabel","onClickCheck","onClickLabel","onClickDelete","onClickApplyUpdate","onClickCancelUpdate","newLabel","setNewLabel","isHovered","setIsHovered","onMouseEnter","onMouseLeave","checked","Value","Meter","progress","Progress","max","CardIcon","CloseIcon","NameWrapper","ListName","Subtitle","h3","Description","isEmpty","height","SectionHeader","Section","EditWrapper","AddCheckButton","DeleteButton","span","UPDATE_CARD_NAME","UPDATE_CARD_DESCRIPTION","CREATE_CHECK","UPDATE_CHECK","checkId","updateCardName","updateCardDescription","CardDetail","cardSlug","refInputDescription","refInputCheck","divide","Number","isNaN","toFixed","isUpdateCardName","isUpdateCardDescription","isCreateCheck","newDescription","setNewDescription","newCheck","setNewCheck","faIdCard","isSameCard","moveCheck","item","newIndex","oldIndex","sortedCards","arrayMove","concat","afterDeletedLists","sortedLists","withIndex","newListId","byListId","oldListId","sourceCards","destinationCards","newSourceCards","newDestinationCards","slice","afterDeletedCards","sortedChecks","afterDeletedChecks","persistConfig","storage","rootReducer","combineReducers","reducers","persistedReducer","persistReducer","store","createStore","App","persistStore","basename","process","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd6dcb81.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Container = styled.div`\r\n  width: 180px;\r\n  height: 96px;\r\n  background: #3498db;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n  padding: 12px;\r\n`;\r\n\r\nconst Name = styled.p`\r\n  font-family: \"Roboto\";\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  color: white;\r\n  margin: 0px;\r\n  line-height: 1.2em;\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  text-decoration: none;\r\n`;\r\n\r\nconst Board = ({ name, to }) => (\r\n  <StyledLink to={to}>\r\n    <Container>\r\n      <Name>{name}</Name>\r\n    </Container>\r\n  </StyledLink>\r\n);\r\n\r\nBoard.propTypes = {\r\n  name: PropTypes.string,\r\n  to: PropTypes.string\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  width: 180px;\r\n  height: 96px;\r\n  background: #eee;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n  padding: 12px;\r\n  display: flex;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Label = styled.p`\r\n  font-family: \"Roboto\";\r\n  font-size: 14px;\r\n  color: #aaa;\r\n  margin: auto;\r\n`;\r\n\r\nconst CreateBoard = ({ onClick }) => (\r\n  <Container onClick={onClick}>\r\n    <Label>Create New Board</Label>\r\n  </Container>\r\n);\r\n\r\nCreateBoard.propTypes = {\r\n  onClick: PropTypes.func\r\n};\r\n\r\nexport default CreateBoard;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport chroma from \"chroma-js\";\r\n\r\nconst Content = styled.button`\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  background: ${({ color }) => color};\r\n  color: white;\r\n  border: 0px;\r\n  font-family: \"Roboto\";\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background: ${({ color }) =>\r\n      chroma(color)\r\n        .brighten(0.3)\r\n        .hex()};\r\n  }\r\n\r\n  &:disabled {\r\n    background: #eee;\r\n    color: #aaa;\r\n  }\r\n`;\r\n\r\nconst Button = ({ className, label, color, onClick, isDisabled }) => (\r\n  <Content\r\n    className={className}\r\n    color={color}\r\n    onClick={onClick}\r\n    disabled={isDisabled}\r\n  >\r\n    {label}\r\n  </Content>\r\n);\r\n\r\nButton.propTypes = {\r\n  className: PropTypes.string,\r\n  label: PropTypes.string,\r\n  color: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  isDisabled: PropTypes.bool\r\n};\r\n\r\nButton.defaultProps = {\r\n  color: \"#2ecc71\"\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Modal from \"react-modal\";\r\nimport chroma from \"chroma-js\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport Button from \"./Button\";\r\n\r\nconst Board = styled.div`\r\n  width: 320px;\r\n  height: 96px;\r\n  background: #3498db;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n  padding: 12px;\r\n  margin: 16px 0px;\r\n  display: flex;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n  border: 0px;\r\n  padding: 8px;\r\n  margin-right: 24px;\r\n  font-family: \"Roboto\";\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  color: white;\r\n  background: ${chroma(\"#3498db\")\r\n    .brighten(0.5)\r\n    .hex()};\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  color: white;\r\n  margin-right: 4px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst modalStyles = {\r\n  overlay: {\r\n    background: \"rgba(0, 0, 0, 0.7)\"\r\n  },\r\n  content: {\r\n    background: \"none\",\r\n    border: 0,\r\n    width: 320,\r\n    padding: 0,\r\n    margin: \"auto\"\r\n  }\r\n};\r\n\r\nconst ModalCreateBoard = ({ isOpen, onClickCreate, onClickClose }) => {\r\n  const [boardName, setBoardName] = useState(\"\");\r\n  const refInput = useRef(null);\r\n\r\n  return (\r\n    <Modal\r\n      style={modalStyles}\r\n      isOpen={isOpen}\r\n      onRequestClose={() => {\r\n        onClickClose();\r\n        setBoardName(\"\");\r\n      }}\r\n      onAfterOpen={() => refInput.current.focus()}\r\n      contentLabel=\"Modal Create Board\"\r\n    >\r\n      <Board>\r\n        <Input\r\n          ref={refInput}\r\n          type=\"text\"\r\n          name=\"board\"\r\n          value={boardName}\r\n          onChange={event => setBoardName(event.target.value)}\r\n          onKeyDown={event => {\r\n            const isEnterPressed = event.keyCode === 13;\r\n\r\n            if (isEnterPressed && boardName) {\r\n              onClickCreate(boardName);\r\n              setBoardName(\"\");\r\n            }\r\n          }}\r\n          autoComplete=\"off\"\r\n        />\r\n        <Icon\r\n          icon={faTimes}\r\n          onClick={() => {\r\n            onClickClose();\r\n            setBoardName(\"\");\r\n          }}\r\n        />\r\n      </Board>\r\n      <Button\r\n        label=\"Create Board\"\r\n        onClick={() => {\r\n          onClickCreate(boardName);\r\n          setBoardName(\"\");\r\n        }}\r\n        isDisabled={!boardName}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nModalCreateBoard.propTypes = {\r\n  isOpen: PropTypes.bool,\r\n  onClickCreate: PropTypes.bool,\r\n  onClickClose: PropTypes.bool\r\n};\r\n\r\nexport default ModalCreateBoard;\r\n","import uuid from \"uuid/v4\";\r\n\r\nimport {\r\n  CREATE_BOARD,\r\n  UPDATE_BOARD,\r\n  DELETE_BOARD,\r\n  CREATE_LIST,\r\n  UPDATE_LIST,\r\n  DELETE_LIST,\r\n  CREATE_CARD,\r\n  UPDATE_CARD,\r\n  DELETE_CARD,\r\n  DELETE_CHECK,\r\n  CREATE_CHECK,\r\n  UPDATE_CHECK,\r\n  MOVE_CARD,\r\n  MOVE_LIST,\r\n  MOVE_CHECK\r\n} from \"./actions\";\r\n\r\nexport const createBoard = name => {\r\n  const id = uuid();\r\n  const slug = name.toLowerCase().replace(\" \", \"-\") + `-${id}`;\r\n  const timestamp = Date.now();\r\n\r\n  return {\r\n    type: CREATE_BOARD,\r\n    payload: {\r\n      id,\r\n      slug,\r\n      name,\r\n      timestamp\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateBoard = (id, name) => ({\r\n  type: UPDATE_BOARD,\r\n  payload: { id, name }\r\n});\r\n\r\nexport const deleteBoard = id => ({\r\n  type: DELETE_BOARD,\r\n  payload: id\r\n});\r\n\r\nexport const createList = ({ boardId, name }) => {\r\n  const id = uuid();\r\n  const timestamp = Date.now();\r\n\r\n  return {\r\n    type: CREATE_LIST,\r\n    payload: {\r\n      id,\r\n      boardId,\r\n      name,\r\n      timestamp\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateList = (id, data) => {\r\n  const validData = {};\r\n  const dataKeys = [\"name\"];\r\n\r\n  dataKeys.forEach(key => {\r\n    if (data[key] === undefined) return;\r\n\r\n    validData[key] = data[key];\r\n  });\r\n\r\n  return {\r\n    type: UPDATE_LIST,\r\n    payload: { id, data: validData }\r\n  };\r\n};\r\n\r\nexport const moveList = (id, data) => {\r\n  const validData = {};\r\n  const dataKeys = [\"index\"];\r\n\r\n  dataKeys.forEach(key => {\r\n    if (data[key] === undefined) return;\r\n\r\n    validData[key] = data[key];\r\n  });\r\n\r\n  return {\r\n    type: MOVE_LIST,\r\n    payload: { id, data: validData }\r\n  };\r\n};\r\n\r\nexport const deleteList = id => ({\r\n  type: DELETE_LIST,\r\n  payload: id\r\n});\r\n\r\nexport const createCard = ({ listId, name }) => {\r\n  const id = uuid();\r\n  const slug = name.toLowerCase().replace(\" \", \"-\") + `-${id}`;\r\n  const timestamp = Date.now();\r\n  const description = \"\";\r\n\r\n  return {\r\n    type: CREATE_CARD,\r\n    payload: {\r\n      id,\r\n      listId,\r\n      slug,\r\n      name,\r\n      description,\r\n      timestamp\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateCard = (id, data) => {\r\n  const validData = {};\r\n  const dataKeys = [\"name\", \"description\"];\r\n\r\n  dataKeys.forEach(key => {\r\n    if (data[key] === undefined) return;\r\n\r\n    validData[key] = data[key];\r\n  });\r\n\r\n  return {\r\n    type: UPDATE_CARD,\r\n    payload: { id, data: validData }\r\n  };\r\n};\r\n\r\nexport const moveCard = (id, data) => {\r\n  const validData = {};\r\n  const dataKeys = [\"listId\", \"index\"];\r\n\r\n  dataKeys.forEach(key => {\r\n    if (data[key] === undefined) return;\r\n\r\n    validData[key] = data[key];\r\n  });\r\n\r\n  return {\r\n    type: MOVE_CARD,\r\n    payload: { id, data: validData }\r\n  };\r\n};\r\n\r\nexport const deleteCard = id => ({\r\n  type: DELETE_CARD,\r\n  payload: id\r\n});\r\n\r\nexport const createCheck = ({ cardId, label }) => {\r\n  const id = uuid();\r\n  const timestamp = Date.now();\r\n  const isChecked = false;\r\n\r\n  return {\r\n    type: CREATE_CHECK,\r\n    payload: {\r\n      id,\r\n      cardId,\r\n      label,\r\n      isChecked,\r\n      timestamp\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateCheck = (id, data) => {\r\n  const validData = {};\r\n  const dataKeys = [\"label\", \"isChecked\"];\r\n\r\n  dataKeys.forEach(key => {\r\n    if (data[key] === undefined) return;\r\n\r\n    validData[key] = data[key];\r\n  });\r\n\r\n  return {\r\n    type: UPDATE_CHECK,\r\n    payload: { id, data: validData }\r\n  };\r\n};\r\n\r\nexport const moveCheck = (id, data) => {\r\n  const validData = {};\r\n  const dataKeys = [\"index\"];\r\n\r\n  dataKeys.forEach(key => {\r\n    if (data[key] === undefined) return;\r\n\r\n    validData[key] = data[key];\r\n  });\r\n\r\n  return {\r\n    type: MOVE_CHECK,\r\n    payload: { id, data: validData }\r\n  };\r\n};\r\n\r\nexport const deleteCheck = id => ({\r\n  type: DELETE_CHECK,\r\n  payload: id\r\n});\r\n","export const CREATE_BOARD = \"CREATE_BOARD\";\r\nexport const UPDATE_BOARD = \"UPDATE_BOARD\";\r\nexport const DELETE_BOARD = \"DELETE_BOARD\";\r\n\r\nexport const CREATE_LIST = \"CREATE_LIST\";\r\nexport const UPDATE_LIST = \"UPDATE_LIST\";\r\nexport const MOVE_LIST = \"MOVE_LIST\";\r\nexport const DELETE_LIST = \"DELETE_LIST\";\r\n\r\nexport const CREATE_CARD = \"CREATE_CARD\";\r\nexport const UPDATE_CARD = \"UPDATE_CARD\";\r\nexport const MOVE_CARD = \"MOVE_CARD\";\r\nexport const DELETE_CARD = \"DELETE_CARD\";\r\n\r\nexport const CREATE_CHECK = \"CREATE_CHECK\";\r\nexport const UPDATE_CHECK = \"UPDATE_CHECK\";\r\nexport const MOVE_CHECK = \"MOVE_CHECK\";\r\nexport const DELETE_CHECK = \"DELETE_CHECK\";\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport Board from \"../components/Board\";\r\nimport CreateBoard from \"../components/CreateBoard\";\r\nimport ModalCreateBoard from \"../components/ModalCreateBoard\";\r\nimport { createBoard } from \"../store/actionCreators\";\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 800px;\r\n  margin: auto;\r\n  padding-top: 48px;\r\n  padding-bottom: 96px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-family: \"Roboto\";\r\n  font-size: 64px;\r\n  letter-spacing: -4px;\r\n  margin-top: 0px;\r\n  color: #333;\r\n`;\r\n\r\nconst BoardList = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 180px);\r\n  grid-gap: 26px;\r\n`;\r\n\r\nconst Home = () => {\r\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\r\n  const boards = useSelector(state => state.boards);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>Hadouken</title>\r\n      </Helmet>\r\n      <Wrapper>\r\n        <Title>Hadouken</Title>\r\n        <BoardList>\r\n          {boards.map(board => (\r\n            <Board key={board.id} name={board.name} to={board.slug} />\r\n          ))}\r\n          <CreateBoard onClick={() => setIsCreateOpen(true)} />\r\n        </BoardList>\r\n      </Wrapper>\r\n      <ModalCreateBoard\r\n        onClickClose={() => setIsCreateOpen(false)}\r\n        onClickCreate={boardName => {\r\n          dispatch(createBoard(boardName));\r\n          setIsCreateOpen(false);\r\n        }}\r\n        isOpen={isCreateOpen}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport chroma from \"chroma-js\";\r\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes, faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport autosize from \"autosize\";\r\n\r\nimport Button from \"./Button\";\r\n\r\nconst Container = styled.div`\r\n  width: 280px;\r\n  margin-right: 12px;\r\n  background: #eee;\r\n  border-radius: 4px;\r\n  flex-shrink: 0;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  width: 100%;\r\n  height: 42px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0px 12px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Footer = styled(Header)`\r\n  padding: 0px 8px;\r\n  height: 48px;\r\n`;\r\n\r\nconst Name = styled.h2`\r\n  font-size: 14px;\r\n  font-family: \"Roboto\";\r\n  color: #777;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  padding: 0px 8px;\r\n  min-height: 16px;\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 10px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background: #ddd;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background: #ccc;\r\n  }\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  color: #999;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst FooterButton = styled.button`\r\n  border: 0px;\r\n  border-radius: 4px;\r\n  padding: 0px 12px;\r\n  background: none;\r\n  width: 100%;\r\n  height: 28px;\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background: #ddd;\r\n  }\r\n`;\r\n\r\nconst Text = styled.p`\r\n  font-size: 14px;\r\n  font-family: \"Roboto\";\r\n  color: #999;\r\n  margin: 0px;\r\n  margin-left: 8px;\r\n`;\r\n\r\nconst ApplyButton = styled(Button)`\r\n  margin-right: 8px;\r\n`;\r\n\r\nconst NewCard = styled.textarea`\r\n  width: 100%;\r\n  min-height: 72px;\r\n  border: 0px;\r\n  border-radius: 4px;\r\n  border-bottom: 1px solid #ccc;\r\n  padding: 12px 8px;\r\n  background: white;\r\n  box-sizing: border-box;\r\n  margin-bottom: 8px;\r\n  font-family: \"Roboto\";\r\n  font-size: 14px;\r\n  outline: none;\r\n  color: #777;\r\n  resize: none;\r\n  line-height: 1.2em;\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  cursor: pointer;\r\n  border: 0px;\r\n  background: none;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  height: 28px;\r\n  font-family: \"Roboto\";\r\n  font-size: 14px;\r\n  outline: none;\r\n  padding: 0px 8px;\r\n  margin-right: 24px;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  border: 2px solid\r\n    ${chroma(\"#3498db\")\r\n      .darken(0.6)\r\n      .hex()};\r\n`;\r\n\r\nconst List = ({\r\n  id,\r\n  index,\r\n  name,\r\n  children,\r\n  isWillAdd,\r\n  isWillUpdateName,\r\n  onNameUpdated,\r\n  onClickName,\r\n  onClickClose,\r\n  onClickAdd,\r\n  onClickApplyAdd,\r\n  onClickCancelAdd\r\n}) => {\r\n  const [newCard, setNewCard] = useState(\"\");\r\n  const [newName, setNewName] = useState(name);\r\n  const refInputName = useRef(null);\r\n  const refInputNewCard = useRef(null);\r\n\r\n  useEffect(() => {\r\n    setNewCard(\"\");\r\n\r\n    if (isWillAdd) {\r\n      refInputNewCard.current.focus();\r\n      autosize(refInputNewCard.current);\r\n    }\r\n  }, [isWillAdd]);\r\n\r\n  useEffect(() => {\r\n    if (isWillUpdateName) {\r\n      refInputName.current.select();\r\n    }\r\n  }, [isWillUpdateName]);\r\n\r\n  useEffect(() => {\r\n    const isApplied = !isWillUpdateName && name !== newName;\r\n\r\n    if (!isApplied) return;\r\n\r\n    onNameUpdated(newName);\r\n\r\n    if (newName) return;\r\n\r\n    setNewName(name);\r\n  }, [isWillUpdateName, name, onNameUpdated, newName]);\r\n\r\n  return (\r\n    <Draggable draggableId={id} index={index}>\r\n      {provided => (\r\n        <Container\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <Header>\r\n            {isWillUpdateName ? (\r\n              <Input\r\n                ref={refInputName}\r\n                type=\"text\"\r\n                value={newName}\r\n                onClick={event => event.stopPropagation()}\r\n                onChange={event => setNewName(event.target.value)}\r\n                onKeyDown={event => {\r\n                  switch (event.keyCode) {\r\n                    case 13: // Enter is pressed\r\n                    case 27: // Escape is pressed\r\n                      onNameUpdated(newName);\r\n                      break;\r\n\r\n                    default:\r\n                      break;\r\n                  }\r\n                }}\r\n              />\r\n            ) : (\r\n              <Name\r\n                onClick={event => {\r\n                  event.stopPropagation();\r\n                  onClickName();\r\n                }}\r\n              >\r\n                {name}\r\n              </Name>\r\n            )}\r\n            <CloseButton\r\n              type=\"button\"\r\n              onClick={event => {\r\n                event.stopPropagation();\r\n                onClickClose();\r\n              }}\r\n            >\r\n              <Icon icon={faTimes} />\r\n            </CloseButton>\r\n          </Header>\r\n          <Droppable droppableId={id} type=\"CARD\">\r\n            {provided => (\r\n              <Content ref={provided.innerRef} {...provided.droppableProps}>\r\n                {children}\r\n                {provided.placeholder}\r\n                {isWillAdd && (\r\n                  <NewCard\r\n                    ref={refInputNewCard}\r\n                    placeholder=\"Enter a name for this card...\"\r\n                    onClick={event => event.stopPropagation()}\r\n                    onChange={event => setNewCard(event.target.value)}\r\n                    onKeyDown={event => {\r\n                      switch (event.keyCode) {\r\n                        case 13: // Enter is pressed\r\n                          onClickApplyAdd(newCard);\r\n                          setTimeout(() => setNewCard(\"\"), 50);\r\n                          break;\r\n\r\n                        case 27: // Escape is pressed\r\n                          onClickCancelAdd();\r\n                          break;\r\n\r\n                        default:\r\n                          break;\r\n                      }\r\n                    }}\r\n                    value={newCard}\r\n                  />\r\n                )}\r\n              </Content>\r\n            )}\r\n          </Droppable>\r\n          <Footer>\r\n            {isWillAdd ? (\r\n              <>\r\n                <ApplyButton\r\n                  label=\"Apply\"\r\n                  onClick={event => {\r\n                    event.stopPropagation();\r\n                    onClickApplyAdd(newCard);\r\n                    setTimeout(() => setNewCard(\"\"), 50);\r\n                  }}\r\n                />\r\n                <Button\r\n                  label=\"Cancel\"\r\n                  color=\"#e74c3c\"\r\n                  onClick={event => {\r\n                    event.stopPropagation();\r\n                    onClickCancelAdd();\r\n                  }}\r\n                />\r\n              </>\r\n            ) : (\r\n              <FooterButton\r\n                type=\"button\"\r\n                onClick={event => {\r\n                  event.stopPropagation();\r\n                  onClickAdd();\r\n                }}\r\n              >\r\n                <Icon icon={faPlus} />\r\n                <Text>Add new card</Text>\r\n              </FooterButton>\r\n            )}\r\n          </Footer>\r\n        </Container>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nList.propTypes = {\r\n  id: PropTypes.string,\r\n  index: PropTypes.string,\r\n  name: PropTypes.string,\r\n  children: PropTypes.array,\r\n  isWillAdd: PropTypes.bool,\r\n  isWillUpdateName: PropTypes.bool,\r\n  onNameUpdated: PropTypes.func,\r\n  onClickName: PropTypes.func,\r\n  onClickClose: PropTypes.func,\r\n  onClickAdd: PropTypes.func,\r\n  onClickApplyAdd: PropTypes.func,\r\n  onClickCancelAdd: PropTypes.func\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faList, faCheckSquare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  border-bottom: 1px solid #ccc;\r\n  padding: 12px 8px;\r\n  background: white;\r\n  box-sizing: border-box;\r\n  margin-bottom: 8px;\r\n\r\n  &:hover {\r\n    background: #f5f5f5;\r\n  }\r\n`;\r\n\r\nconst Text = styled.p`\r\n  font-family: \"Roboto\";\r\n  font-size: 14px;\r\n  color: #777;\r\n  margin: 0px;\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  font-size: 14px;\r\n`;\r\n\r\nconst IconDescription = styled(Icon)`\r\n  margin-right: 14px;\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n  display: flex;\r\n  height: 28px;\r\n  align-items: center;\r\n  margin-top: 8px;\r\n  padding: 0px 4px;\r\n`;\r\n\r\nconst IconCheckWrapper = styled.div`\r\n  background: ${({ isCompleted }) => (isCompleted ? \"#2ecc71\" : \"none\")};\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 6px;\r\n  margin-left: -4px;\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst CheckValue = styled(Text)`\r\n  margin-left: 6px;\r\n  margin-bottom: -2px;\r\n  font-size: 12px;\r\n  color: ${({ color }) => color || \"#777\"};\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  text-decoration: none;\r\n`;\r\n\r\nconst Card = ({\r\n  id,\r\n  index,\r\n  name,\r\n  to,\r\n  totalChecked,\r\n  maxChecklist,\r\n  hasDescription,\r\n  hasChecklist\r\n}) => {\r\n  const isCompleted = totalChecked === maxChecklist;\r\n\r\n  return (\r\n    <Draggable draggableId={id} index={index}>\r\n      {provided => (\r\n        <StyledLink to={to}>\r\n          <Container\r\n            ref={provided.innerRef}\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n          >\r\n            <Text>{name}</Text>\r\n            {(hasDescription || hasChecklist) && (\r\n              <IconWrapper>\r\n                {hasDescription && (\r\n                  <IconDescription icon={faList} color=\"#777\" />\r\n                )}\r\n                {hasChecklist && (\r\n                  <IconCheckWrapper isCompleted={isCompleted}>\r\n                    <Icon\r\n                      icon={faCheckSquare}\r\n                      color={isCompleted ? \"white\" : \"#777\"}\r\n                    />\r\n                    <CheckValue color={isCompleted ? \"white\" : \"#777\"}>\r\n                      {totalChecked}/{maxChecklist}\r\n                    </CheckValue>\r\n                  </IconCheckWrapper>\r\n                )}\r\n              </IconWrapper>\r\n            )}\r\n          </Container>\r\n        </StyledLink>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nCard.propTypes = {\r\n  id: PropTypes.string,\r\n  index: PropTypes.number,\r\n  name: PropTypes.string,\r\n  to: PropTypes.string,\r\n  totalChecked: PropTypes.number,\r\n  maxChecklist: PropTypes.number,\r\n  hasDescription: PropTypes.bool,\r\n  hasChecklist: PropTypes.bool\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport chroma from \"chroma-js\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport Button from \"./Button\";\r\n\r\nconst Container = styled.button`\r\n  width: 280px;\r\n  height: 40px;\r\n  flex-shrink: 0;\r\n  color: white;\r\n  display: flex;\r\n  border: 0px;\r\n  border-radius: 4px;\r\n  padding: 0px 16px;\r\n  cursor: pointer;\r\n  background: ${chroma(\"#3498db\")\r\n    .brighten(0.5)\r\n    .hex()};\r\n\r\n  &:hover {\r\n    background: ${chroma(\"#3498db\")\r\n      .brighten(0.6)\r\n      .hex()};\r\n  }\r\n`;\r\n\r\nconst Label = styled.p`\r\n  font-size: 14px;\r\n  font-family: \"Roboto\";\r\n  margin: 0px;\r\n  margin-left: 8px;\r\n`;\r\n\r\nconst List = styled.div`\r\n  width: 280px;\r\n  flex-shrink: 0;\r\n  background: #eee;\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst ApplyButton = styled(Button)`\r\n  margin-right: 8px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  padding: 8px;\r\n  padding-bottom: 0px;\r\n`;\r\n\r\nconst Footer = styled.div`\r\n  width: 100%;\r\n  height: 48px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0px 8px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  height: 36px;\r\n  font-family: \"Roboto\";\r\n  font-size: 14px;\r\n  outline: none;\r\n  padding: 0px 12px;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  border: 2px solid\r\n    ${chroma(\"#3498db\")\r\n      .darken(0.6)\r\n      .hex()};\r\n`;\r\n\r\nconst CreateList = ({\r\n  isWillAdd,\r\n  onClickAdd,\r\n  onClickApplyAdd,\r\n  onClickCancelAdd\r\n}) => {\r\n  const [name, setName] = useState(\"\");\r\n  const refInput = useRef(null);\r\n\r\n  useEffect(() => {\r\n    setName(\"\");\r\n\r\n    if (isWillAdd) {\r\n      refInput.current.focus();\r\n    }\r\n  }, [isWillAdd]);\r\n\r\n  return isWillAdd ? (\r\n    <List>\r\n      <Header>\r\n        <Input\r\n          ref={refInput}\r\n          type=\"text\"\r\n          placeholder=\"Enter list name...\"\r\n          value={name}\r\n          onClick={event => event.stopPropagation()}\r\n          onChange={event => setName(event.target.value)}\r\n          onKeyDown={event => {\r\n            switch (event.keyCode) {\r\n              case 13: // Enter is pressed\r\n                onClickApplyAdd(name);\r\n                break;\r\n\r\n              case 27: // Escape is pressed\r\n                onClickCancelAdd();\r\n                break;\r\n\r\n              default:\r\n                break;\r\n            }\r\n          }}\r\n        />\r\n      </Header>\r\n      <Footer>\r\n        <ApplyButton\r\n          label=\"Apply\"\r\n          onClick={event => {\r\n            event.stopPropagation();\r\n            onClickApplyAdd(name);\r\n          }}\r\n        />\r\n        <Button\r\n          label=\"Cancel\"\r\n          color=\"#e74c3c\"\r\n          onClick={event => {\r\n            event.stopPropagation();\r\n            onClickCancelAdd();\r\n          }}\r\n        />\r\n      </Footer>\r\n    </List>\r\n  ) : (\r\n    <Container\r\n      onClick={event => {\r\n        event.stopPropagation();\r\n        onClickAdd();\r\n      }}\r\n    >\r\n      <FontAwesomeIcon icon={faPlus} size={14} />\r\n      <Label>Add new list</Label>\r\n    </Container>\r\n  );\r\n};\r\n\r\nCreateList.propTypes = {\r\n  isWillAdd: PropTypes.bool,\r\n  onClickAdd: PropTypes.func,\r\n  onClickApplyAdd: PropTypes.func,\r\n  onClickCancelAdd: PropTypes.func\r\n};\r\n\r\nexport default CreateList;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { Machine, assign } from \"xstate\";\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\nimport { useMachine } from \"@xstate/react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\r\nimport chroma from \"chroma-js\";\r\n\r\nimport List from \"../components/List\";\r\nimport Card from \"../components/Card\";\r\nimport Button from \"../components/Button\";\r\nimport CreateList from \"../components/CreateList\";\r\nimport {\r\n  createList,\r\n  deleteList,\r\n  createCard,\r\n  updateList,\r\n  updateBoard,\r\n  deleteBoard,\r\n  moveCard,\r\n  moveList,\r\n  deleteCard,\r\n  deleteCheck\r\n} from \"../store/actionCreators\";\r\n\r\nconst Container = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  box-sizing: border-box;\r\n  background: #3498db;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  width: calc(100vw - 64px);\r\n  margin: auto;\r\n  padding-top: 48px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-family: \"Roboto\";\r\n  font-size: 32px;\r\n  letter-spacing: -1px;\r\n  margin-top: 0px;\r\n  margin-bottom: 0px;\r\n  margin-right: 24px;\r\n  color: white;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 320px;\r\n  height: 42px;\r\n  font-family: \"Roboto\";\r\n  font-size: 24px;\r\n  outline: none;\r\n  padding: 0px 8px;\r\n  margin-right: 24px;\r\n  margin-bottom: 24px;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  border: 0px;\r\n`;\r\n\r\nconst ListWrapper = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  overflow-x: auto;\r\n  height: 80vh;\r\n\r\n  &::-webkit-scrollbar {\r\n    height: 10px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    border-radius: 8px;\r\n    background: ${chroma(\"#3498db\")\r\n      .darken(0.3)\r\n      .hex()};\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    border-radius: 8px;\r\n    background: ${chroma(\"#3498db\")\r\n      .brighten(0.5)\r\n      .hex()};\r\n  }\r\n`;\r\n\r\nconst Header = styled.header`\r\n  display: flex;\r\n  margin-bottom: 24px;\r\n  align-items: center;\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  font-size: 32px;\r\n  margin-right: 32px;\r\n  cursor: pointer;\r\n  color: ${chroma(\"#3498db\")\r\n    .brighten(0.5)\r\n    .hex()};\r\n`;\r\n\r\nconst machine = Machine({\r\n  id: \"machine\",\r\n  initial: \"idle\",\r\n  states: {\r\n    idle: {\r\n      on: {\r\n        CREATE_LIST: \"createList\",\r\n        UPDATE_BOARD_NAME: \"updateBoardName\",\r\n        CREATE_CARD: {\r\n          target: \"createCard\",\r\n          actions: assign({\r\n            listId: (_, event) => event.listId\r\n          })\r\n        },\r\n        UPDATE_LIST_NAME: {\r\n          target: \"updateListName\",\r\n          actions: assign({\r\n            listId: (_, event) => event.listId\r\n          })\r\n        }\r\n      }\r\n    },\r\n    createList: {\r\n      on: {\r\n        IDLE: \"idle\",\r\n        UPDATE_BOARD_NAME: \"updateBoardName\",\r\n        CREATE_CARD: {\r\n          target: \"createCard\",\r\n          actions: assign({\r\n            listId: (_, event) => event.listId\r\n          })\r\n        },\r\n        UPDATE_LIST_NAME: {\r\n          target: \"updateListName\",\r\n          actions: assign({\r\n            listId: (_, event) => event.listId\r\n          })\r\n        }\r\n      }\r\n    },\r\n    createCard: {\r\n      on: {\r\n        IDLE: \"idle\",\r\n        CREATE_LIST: \"createList\",\r\n        UPDATE_BOARD_NAME: \"updateBoardName\",\r\n        CREATE_CARD: {\r\n          target: \"createCard\",\r\n          actions: assign({\r\n            listId: (_, event) => event.listId\r\n          })\r\n        },\r\n        UPDATE_LIST_NAME: {\r\n          target: \"updateListName\",\r\n          actions: assign({\r\n            listId: (_, event) => event.listId\r\n          })\r\n        }\r\n      }\r\n    },\r\n    updateListName: {\r\n      on: {\r\n        IDLE: \"idle\",\r\n        CREATE_LIST: \"createList\",\r\n        UPDATE_BOARD_NAME: \"updateBoardName\",\r\n        CREATE_CARD: {\r\n          target: \"createCard\",\r\n          actions: assign({\r\n            listId: (_, event) => event.listId\r\n          })\r\n        },\r\n        UPDATE_LIST_NAME: {\r\n          target: \"updateListName\",\r\n          actions: assign({\r\n            listId: (_, event) => event.listId\r\n          })\r\n        }\r\n      }\r\n    },\r\n    updateBoardName: {\r\n      on: {\r\n        IDLE: \"idle\",\r\n        CREATE_LIST: \"createList\",\r\n        CREATE_CARD: {\r\n          target: \"createCard\",\r\n          actions: assign({\r\n            listId: (_, event) => event.listId\r\n          })\r\n        },\r\n        UPDATE_LIST_NAME: {\r\n          target: \"updateListName\",\r\n          actions: assign({\r\n            listId: (_, event) => event.listId\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nconst BoardDetail = () => {\r\n  const boards = useSelector(state => state.boards);\r\n  const lists = useSelector(state => state.lists);\r\n  const cards = useSelector(state => state.cards);\r\n  const checks = useSelector(state => state.checks);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { boardSlug } = useParams();\r\n  const [current, send] = useMachine(machine);\r\n  const refInputName = useRef(null);\r\n\r\n  const isUpdateBoardName = current.matches(\"updateBoardName\");\r\n  const board = boards.find(board => board.slug === boardSlug);\r\n\r\n  const currentLists = lists\r\n    .filter(list => list.boardId === board.id)\r\n    .sort((a, b) => a.index - b.index);\r\n\r\n  const [newBoardName, setNewBoardName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewBoardName(board ? board.name : \"\");\r\n  }, [board]);\r\n\r\n  useEffect(() => {\r\n    if (isUpdateBoardName) {\r\n      refInputName.current.select();\r\n    }\r\n  }, [isUpdateBoardName]);\r\n\r\n  const reorder = result => {\r\n    const { type, source, destination, draggableId } = result;\r\n\r\n    if (!destination) return;\r\n\r\n    const isSameList = destination.droppableId === source.droppableId;\r\n    const isSameIndex = destination.index === source.index;\r\n\r\n    if (isSameList && isSameIndex) return;\r\n\r\n    if (type === \"LIST\") {\r\n      dispatch(\r\n        moveList(draggableId, {\r\n          index: destination.index\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(\r\n        moveCard(draggableId, {\r\n          listId: isSameList ? undefined : destination.droppableId,\r\n          index: destination.index\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  if (!board) return null;\r\n\r\n  return (\r\n    <Container onClick={() => send(\"IDLE\")}>\r\n      <Helmet>\r\n        <title>Hadouken | {board.name}</title>\r\n      </Helmet>\r\n      <Wrapper>\r\n        {current.matches(\"updateBoardName\") ? (\r\n          <Input\r\n            ref={refInputName}\r\n            type=\"text\"\r\n            value={newBoardName}\r\n            onClick={event => event.stopPropagation()}\r\n            onChange={event => setNewBoardName(event.target.value)}\r\n            onBlur={() => dispatch(updateBoard(board.id, newBoardName))}\r\n            onKeyDown={event => {\r\n              switch (event.keyCode) {\r\n                case 13: // Enter is pressed\r\n                case 27: // Escape is pressed\r\n                  dispatch(updateBoard(board.id, newBoardName));\r\n                  send(\"IDLE\");\r\n                  break;\r\n\r\n                default:\r\n                  break;\r\n              }\r\n            }}\r\n          />\r\n        ) : (\r\n          <Header>\r\n            <Icon\r\n              icon={faHome}\r\n              onClick={event => {\r\n                event.stopPropagation();\r\n                history.goBack();\r\n              }}\r\n            />\r\n            <Title\r\n              onClick={event => {\r\n                event.stopPropagation();\r\n                send(\"UPDATE_BOARD_NAME\");\r\n              }}\r\n            >\r\n              {board.name}\r\n            </Title>\r\n            <Button\r\n              label=\"Delete\"\r\n              color=\"#5cb5fa\"\r\n              onClick={event => {\r\n                event.stopPropagation();\r\n                history.goBack();\r\n                setTimeout(() => {\r\n                  currentLists.forEach(list => {\r\n                    const currentCards = cards\r\n                      .filter(card => card.listId === list.id)\r\n                      .sort((a, b) => a.index - b.index);\r\n\r\n                    currentCards.forEach(card => {\r\n                      const currentChecks = checks.filter(\r\n                        check => check.cardId === card.id\r\n                      );\r\n\r\n                      currentChecks.forEach(check => {\r\n                        dispatch(deleteCheck(check.id));\r\n                      });\r\n\r\n                      dispatch(deleteCard(card.id));\r\n                    });\r\n\r\n                    dispatch(deleteList(list.id));\r\n                  });\r\n\r\n                  dispatch(deleteBoard(board.id));\r\n                }, 50);\r\n              }}\r\n            />\r\n          </Header>\r\n        )}\r\n        <DragDropContext onDragEnd={reorder}>\r\n          <Droppable\r\n            droppableId=\"droppable-root\"\r\n            direction=\"horizontal\"\r\n            type=\"LIST\"\r\n          >\r\n            {provided => (\r\n              <ListWrapper ref={provided.innerRef} {...provided.droppableProps}>\r\n                {currentLists.map(list => {\r\n                  const currentCards = cards\r\n                    .filter(card => card.listId === list.id)\r\n                    .sort((a, b) => a.index - b.index);\r\n\r\n                  return (\r\n                    <List\r\n                      key={list.id}\r\n                      id={list.id}\r\n                      index={list.index}\r\n                      name={list.name}\r\n                      onNameUpdated={newListName => {\r\n                        if (!newListName) return;\r\n\r\n                        dispatch(updateList(list.id, { name: newListName }));\r\n                        send(\"IDLE\");\r\n                      }}\r\n                      onClickName={() =>\r\n                        send(\"UPDATE_LIST_NAME\", { listId: list.id })\r\n                      }\r\n                      onClickClose={() => {\r\n                        currentCards.forEach(card => {\r\n                          const currentChecks = checks.filter(\r\n                            check => check.cardId === card.id\r\n                          );\r\n\r\n                          currentChecks.forEach(check => {\r\n                            dispatch(deleteCheck(check.id));\r\n                          });\r\n\r\n                          dispatch(deleteCard(card.id));\r\n                        });\r\n\r\n                        dispatch(deleteList(list.id));\r\n                      }}\r\n                      onClickAdd={() =>\r\n                        send(\"CREATE_CARD\", { listId: list.id })\r\n                      }\r\n                      onClickApplyAdd={cardName => {\r\n                        if (!cardName) return;\r\n\r\n                        const action = createCard({\r\n                          listId: list.id,\r\n                          name: cardName\r\n                        });\r\n\r\n                        dispatch(action);\r\n                      }}\r\n                      onClickCancelAdd={() => send(\"IDLE\")}\r\n                      isWillAdd={\r\n                        current.matches(\"createCard\") &&\r\n                        current.context.listId === list.id\r\n                      }\r\n                      isWillUpdateName={\r\n                        current.matches(\"updateListName\") &&\r\n                        current.context.listId === list.id\r\n                      }\r\n                    >\r\n                      {currentCards.map(card => {\r\n                        const currentChecks = checks.filter(\r\n                          check => check.cardId === card.id\r\n                        );\r\n\r\n                        const totalChecked = currentChecks.filter(\r\n                          check => !!check.isChecked\r\n                        ).length;\r\n\r\n                        return (\r\n                          <Card\r\n                            key={card.id}\r\n                            id={card.id}\r\n                            index={card.index}\r\n                            name={card.name}\r\n                            to={`${board.slug}/${card.slug}`}\r\n                            totalChecked={totalChecked}\r\n                            maxChecklist={currentChecks.length}\r\n                            hasDescription={card.description}\r\n                            hasChecklist={!!currentChecks.length}\r\n                          />\r\n                        );\r\n                      })}\r\n                    </List>\r\n                  );\r\n                })}\r\n                {provided.placeholder}\r\n                <CreateList\r\n                  onClickAdd={() => send(\"CREATE_LIST\")}\r\n                  onClickApplyAdd={listName => {\r\n                    if (!listName) return;\r\n\r\n                    const action = createList({\r\n                      boardId: board.id,\r\n                      name: listName\r\n                    });\r\n\r\n                    dispatch(action);\r\n                    send(\"IDLE\");\r\n                  }}\r\n                  onClickCancelAdd={() => send(\"IDLE\")}\r\n                  isWillAdd={current.matches(\"createList\")}\r\n                />\r\n              </ListWrapper>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default BoardDetail;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport Button from \"./Button\";\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  padding: 8px;\r\n  padding-bottom: 12px;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  background: #eee;\r\n\r\n  &:hover {\r\n    background: #e7e7e7;\r\n  }\r\n`;\r\n\r\nconst Label = styled.p`\r\n  font-family: \"Roboto\";\r\n  font-size: 14px;\r\n  color: #777;\r\n  margin: 0px;\r\n  line-height: 1.2em;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  text-decoration: ${({ isChecked }) => (isChecked ? \"line-through\" : \"none\")};\r\n`;\r\n\r\nconst Checkbox = styled.input`\r\n  margin-right: 16px;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  margin-left: auto;\r\n  font-size: 14px;\r\n  color: #777;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst LabelWrapper = styled.div`\r\n  flex: 1;\r\n  margin-right: 24px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst ApplyButton = styled(Button)`\r\n  margin-right: 8px;\r\n`;\r\n\r\nconst Textarea = styled.textarea`\r\n  width: 100%;\r\n  height: 54px;\r\n  font-family: \"Roboto\";\r\n  font-size: 14px;\r\n  outline: none;\r\n  padding: 8px;\r\n  margin-right: 24px;\r\n  margin-bottom: 8px;\r\n  box-sizing: border-box;\r\n  resize: none;\r\n  background: #e3e3e3;\r\n  border-radius: 4px;\r\n  border: 1px solid #ccc;\r\n`;\r\n\r\nconst Check = ({\r\n  id,\r\n  index,\r\n  label,\r\n  isChecked,\r\n  isWillUpdateLabel,\r\n  onClickCheck,\r\n  onClickLabel,\r\n  onClickDelete,\r\n  onClickApplyUpdate,\r\n  onClickCancelUpdate\r\n}) => {\r\n  const [newLabel, setNewLabel] = useState(label);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const refInput = useRef(null);\r\n\r\n  useEffect(() => {\r\n    setNewLabel(label);\r\n  }, [isWillUpdateLabel, label]);\r\n\r\n  useEffect(() => {\r\n    if (isWillUpdateLabel) {\r\n      refInput.current.select();\r\n    }\r\n  }, [isWillUpdateLabel]);\r\n\r\n  return (\r\n    <Draggable draggableId={id} index={index}>\r\n      {provided => (\r\n        <Container\r\n          ref={provided.innerRef}\r\n          onMouseEnter={() => setIsHovered(true)}\r\n          onMouseLeave={() => setIsHovered(false)}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <Checkbox\r\n            type=\"checkbox\"\r\n            onChange={event => {\r\n              event.stopPropagation();\r\n              onClickCheck();\r\n            }}\r\n            checked={isChecked}\r\n          />\r\n          <LabelWrapper>\r\n            {isWillUpdateLabel ? (\r\n              <>\r\n                <Textarea\r\n                  ref={refInput}\r\n                  placeholder=\"Enter a label...\"\r\n                  value={newLabel}\r\n                  onClick={event => event.stopPropagation()}\r\n                  onChange={event => setNewLabel(event.target.value)}\r\n                  onKeyDown={event => {\r\n                    switch (event.keyCode) {\r\n                      case 13: // Enter is pressed\r\n                        onClickApplyUpdate(newLabel);\r\n                        break;\r\n\r\n                      case 27: // Escape is pressed\r\n                        setNewLabel(label);\r\n                        onClickCancelUpdate();\r\n                        break;\r\n\r\n                      default:\r\n                        break;\r\n                    }\r\n                  }}\r\n                />\r\n                <Row>\r\n                  <ApplyButton\r\n                    label=\"Apply\"\r\n                    onClick={event => {\r\n                      event.stopPropagation();\r\n                      onClickApplyUpdate(newLabel);\r\n                    }}\r\n                  />\r\n                  <Button\r\n                    label=\"Cancel\"\r\n                    color=\"#e74c3c\"\r\n                    onClick={event => {\r\n                      event.stopPropagation();\r\n                      setNewLabel(label);\r\n                      onClickCancelUpdate();\r\n                    }}\r\n                  />\r\n                </Row>\r\n              </>\r\n            ) : (\r\n              <Label\r\n                onClick={event => {\r\n                  event.stopPropagation();\r\n                  onClickLabel();\r\n                }}\r\n                isChecked={isChecked}\r\n              >\r\n                {label}\r\n              </Label>\r\n            )}\r\n          </LabelWrapper>\r\n          {isHovered && (\r\n            <Icon\r\n              icon={faTimes}\r\n              onClick={event => {\r\n                event.stopPropagation();\r\n                onClickDelete();\r\n              }}\r\n            />\r\n          )}\r\n        </Container>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nCheck.propTypes = {\r\n  id: PropTypes.string,\r\n  index: PropTypes.number,\r\n  label: PropTypes.string,\r\n  isChecked: PropTypes.bool,\r\n  isWillUpdateLabel: PropTypes.bool,\r\n  onClickCheck: PropTypes.func,\r\n  onClickLabel: PropTypes.func,\r\n  onClickDelete: PropTypes.func,\r\n  onClickApplyUpdate: PropTypes.func,\r\n  onClickCancelUpdate: PropTypes.func\r\n};\r\n\r\nexport default Check;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 8px;\r\n`;\r\n\r\nconst Value = styled.p`\r\n  font-family: \"Roboto\";\r\n  font-size: 12px;\r\n  color: #777;\r\n  margin: 0px;\r\n  margin-right: 16px;\r\n`;\r\n\r\nconst Meter = styled.progress`\r\n  appearance: none;\r\n  width: 100%;\r\n  height: 8px;\r\n\r\n  &::-webkit-progress-bar {\r\n    background: #ddd;\r\n    border-radius: 8px;\r\n  }\r\n\r\n  &::-webkit-progress-value {\r\n    background: ${({ color }) => color};\r\n    border-radius: 8px;\r\n  }\r\n`;\r\n\r\nconst Progress = ({ value }) => (\r\n  <Container>\r\n    <Value>{value}%</Value>\r\n    <Meter\r\n      value={value}\r\n      max={100}\r\n      color={value >= 100 ? \"#2ecc71\" : \"#3498db\"}\r\n    />\r\n  </Container>\r\n);\r\n\r\nProgress.propTypes = {\r\n  value: PropTypes.number\r\n};\r\n\r\nexport default Progress;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Modal from \"react-modal\";\r\nimport chroma from \"chroma-js\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\nimport {\r\n  faTimes,\r\n  faIdCard,\r\n  faList,\r\n  faCheckSquare\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Machine, assign } from \"xstate\";\r\nimport { useMachine } from \"@xstate/react\";\r\n\r\nimport Button from \"../components/Button\";\r\nimport Check from \"../components/Check\";\r\nimport Progress from \"../components/Progress\";\r\nimport {\r\n  updateCard,\r\n  createCheck,\r\n  updateCheck,\r\n  deleteCheck,\r\n  deleteCard,\r\n  moveCheck\r\n} from \"../store/actionCreators\";\r\n\r\nconst Container = styled.div`\r\n  width: 640px;\r\n  min-height: 320px;\r\n  padding: 24px;\r\n  background: #eee;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  color: #777;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst CardIcon = styled(Icon)`\r\n  margin-top: 4px;\r\n`;\r\n\r\nconst CloseIcon = styled(Icon)`\r\n  font-size: 24px;\r\n  margin-top: 4px;\r\n  margin-left: auto;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  font-family: \"Roboto\";\r\n  color: #777;\r\n  display: flex;\r\n  margin-bottom: 24px;\r\n`;\r\n\r\nconst NameWrapper = styled.div`\r\n  margin-left: 16px;\r\n  margin-right: 32px;\r\n  width: 100%;\r\n`;\r\n\r\nconst Name = styled.h2`\r\n  font-size: 24px;\r\n  font-family: \"Roboto\";\r\n  color: #777;\r\n  margin: 0px;\r\n`;\r\n\r\nconst ListName = styled.p`\r\n  font-size: 14px;\r\n  font-family: \"Roboto\";\r\n  color: #777;\r\n  margin: 0px;\r\n  margin-top: 8px;\r\n`;\r\n\r\nconst Subtitle = styled.h3`\r\n  font-size: 18px;\r\n  font-family: \"Roboto\";\r\n  color: #777;\r\n  margin: 0px;\r\n  margin-left: 16px;\r\n`;\r\n\r\nconst Description = styled.p`\r\n  font-size: 14px;\r\n  font-family: \"Roboto\";\r\n  color: #777;\r\n  margin: 0px;\r\n  line-height: 1.5em;\r\n  cursor: pointer;\r\n\r\n  ${({ isEmpty }) =>\r\n    isEmpty &&\r\n    `\r\n    height: 54px;\r\n    background: #ddd;\r\n    border-radius: 4px;\r\n    padding: 12px;\r\n  `}\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  height: 42px;\r\n  font-family: \"Roboto\";\r\n  font-size: 24px;\r\n  outline: none;\r\n  padding: 0px 8px;\r\n  margin-right: 24px;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  border: 2px solid\r\n    ${chroma(\"#3498db\")\r\n      .darken(0.6)\r\n      .hex()};\r\n`;\r\n\r\nconst Textarea = styled.textarea`\r\n  width: 100%;\r\n  height: ${({ height }) => height || 96}px;\r\n  font-family: \"Roboto\";\r\n  font-size: 14px;\r\n  outline: none;\r\n  padding: 8px;\r\n  line-height: 1.5em;\r\n  margin-right: 24px;\r\n  margin-bottom: 8px;\r\n  box-sizing: border-box;\r\n  resize: none;\r\n  border-radius: 4px;\r\n  border: 2px solid\r\n    ${chroma(\"#3498db\")\r\n      .darken(0.6)\r\n      .hex()};\r\n`;\r\n\r\nconst SectionHeader = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 12px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst ApplyButton = styled(Button)`\r\n  margin-right: 8px;\r\n`;\r\n\r\nconst Section = styled.div`\r\n  margin-top: 36px;\r\n`;\r\n\r\nconst EditWrapper = styled.div`\r\n  padding-left: 32px;\r\n`;\r\n\r\nconst AddCheckButton = styled(Button)`\r\n  margin-top: 8px;\r\n  margin-left: 32px;\r\n`;\r\n\r\nconst DeleteButton = styled.span`\r\n  font-size: 12px;\r\n  text-decoration: underline;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst modalStyles = {\r\n  overlay: {\r\n    background: \"rgba(0, 0, 0, 0.7)\"\r\n  },\r\n  content: {\r\n    background: \"none\",\r\n    border: 0,\r\n    width: 640,\r\n    padding: 0,\r\n    margin: \"auto\"\r\n  }\r\n};\r\n\r\nconst machine = Machine({\r\n  id: \"machine\",\r\n  initial: \"idle\",\r\n  states: {\r\n    idle: {\r\n      on: {\r\n        UPDATE_CARD_NAME: \"updateCardName\",\r\n        UPDATE_CARD_DESCRIPTION: \"updateCardDescription\",\r\n        CREATE_CHECK: \"createCheck\",\r\n        UPDATE_CHECK: {\r\n          target: \"updateCheck\",\r\n          actions: assign({\r\n            checkId: (_, event) => event.checkId\r\n          })\r\n        }\r\n      }\r\n    },\r\n    updateCardName: {\r\n      on: {\r\n        IDLE: \"idle\",\r\n        UPDATE_CARD_DESCRIPTION: \"updateCardDescription\",\r\n        CREATE_CHECK: \"createCheck\",\r\n        UPDATE_CHECK: {\r\n          target: \"updateCheck\",\r\n          actions: assign({\r\n            checkId: (_, event) => event.checkId\r\n          })\r\n        }\r\n      }\r\n    },\r\n    updateCardDescription: {\r\n      on: {\r\n        IDLE: \"idle\",\r\n        UPDATE_CARD_NAME: \"updateCardName\",\r\n        CREATE_CHECK: \"createCheck\",\r\n        UPDATE_CHECK: {\r\n          target: \"updateCheck\",\r\n          actions: assign({\r\n            checkId: (_, event) => event.checkId\r\n          })\r\n        }\r\n      }\r\n    },\r\n    createCheck: {\r\n      on: {\r\n        IDLE: \"idle\",\r\n        UPDATE_CARD_NAME: \"updateCardName\",\r\n        UPDATE_CARD_DESCRIPTION: \"updateCardDescription\",\r\n        UPDATE_CHECK: {\r\n          target: \"updateCheck\",\r\n          actions: assign({\r\n            checkId: (_, event) => event.checkId\r\n          })\r\n        }\r\n      }\r\n    },\r\n    updateCheck: {\r\n      on: {\r\n        IDLE: \"idle\",\r\n        UPDATE_CARD_NAME: \"updateCardName\",\r\n        UPDATE_CARD_DESCRIPTION: \"updateCardDescription\",\r\n        CREATE_CHECK: \"createCheck\",\r\n        UPDATE_CHECK: {\r\n          target: \"updateCheck\",\r\n          actions: assign({\r\n            checkId: (_, event) => event.checkId\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nconst CardDetail = () => {\r\n  const cards = useSelector(state => state.cards);\r\n  const lists = useSelector(state => state.lists);\r\n  const checks = useSelector(state => state.checks);\r\n  const dispatch = useDispatch();\r\n  const { cardSlug } = useParams();\r\n  const history = useHistory();\r\n  const [current, send] = useMachine(machine);\r\n  const refInputName = useRef(null);\r\n  const refInputDescription = useRef(null);\r\n  const refInputCheck = useRef(null);\r\n\r\n  const card = cards.find(card => card.slug === cardSlug);\r\n  const list = lists.find(list => list.id === card.listId);\r\n  const currentChecks = checks.filter(check => check.cardId === card.id);\r\n  const totalChecked = currentChecks.filter(check => !!check.isChecked).length;\r\n  const divide = totalChecked / currentChecks.length;\r\n  const progress = Number.isNaN(divide) ? 0 : (divide * 100).toFixed(0);\r\n  const isUpdateCardName = current.matches(\"updateCardName\");\r\n  const isUpdateCardDescription = current.matches(\"updateCardDescription\");\r\n  const isCreateCheck = current.matches(\"createCheck\");\r\n\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [newDescription, setNewDescription] = useState(\"\");\r\n  const [newCheck, setNewCheck] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewName(card ? card.name : \"\");\r\n    setNewDescription(card ? card.description : \"\");\r\n  }, [card]);\r\n\r\n  useEffect(() => {\r\n    if (isUpdateCardName) {\r\n      refInputName.current.select();\r\n    }\r\n  }, [isUpdateCardName]);\r\n\r\n  useEffect(() => {\r\n    if (isUpdateCardDescription) {\r\n      refInputDescription.current.select();\r\n    }\r\n  }, [isUpdateCardDescription]);\r\n\r\n  useEffect(() => {\r\n    if (isCreateCheck) {\r\n      refInputCheck.current.focus();\r\n    }\r\n  }, [isCreateCheck]);\r\n\r\n  const reorder = result => {\r\n    const { source, destination, draggableId } = result;\r\n\r\n    if (!destination) return;\r\n\r\n    const isSameCard = destination.droppableId === source.droppableId;\r\n    const isSameIndex = destination.index === source.index;\r\n\r\n    if (isSameCard && isSameIndex) return;\r\n\r\n    dispatch(\r\n      moveCheck(draggableId, {\r\n        index: destination.index\r\n      })\r\n    );\r\n  };\r\n\r\n  if (!card || !list) return null;\r\n\r\n  return (\r\n    <Modal\r\n      style={modalStyles}\r\n      onRequestClose={() => {\r\n        send(\"IDLE\");\r\n\r\n        if (current.matches(\"idle\")) {\r\n          history.goBack();\r\n        }\r\n      }}\r\n      contentLabel=\"Card Detail\"\r\n      isOpen\r\n    >\r\n      <Container onClick={() => send(\"IDLE\")}>\r\n        <Header>\r\n          <CardIcon icon={faIdCard} />\r\n          <NameWrapper>\r\n            {current.matches(\"updateCardName\") ? (\r\n              <Input\r\n                ref={refInputName}\r\n                type=\"text\"\r\n                value={newName}\r\n                onClick={event => event.stopPropagation()}\r\n                onChange={event => setNewName(event.target.value)}\r\n                onBlur={() => dispatch(updateCard(card.id, { name: newName }))}\r\n                onKeyDown={event => {\r\n                  switch (event.keyCode) {\r\n                    case 13: // Enter is pressed\r\n                      dispatch(updateCard(card.id, { name: newName }));\r\n                      send(\"IDLE\");\r\n                      break;\r\n\r\n                    case 27: // Escape is pressed\r\n                      setNewName(card.name);\r\n                      send(\"IDLE\");\r\n                      break;\r\n\r\n                    default:\r\n                      break;\r\n                  }\r\n                }}\r\n              />\r\n            ) : (\r\n              <Name\r\n                onClick={event => {\r\n                  event.stopPropagation();\r\n                  send(\"UPDATE_CARD_NAME\");\r\n                }}\r\n              >\r\n                {card.name}\r\n              </Name>\r\n            )}\r\n            <ListName>\r\n              in list <strong>{list.name}</strong>{\" \"}\r\n              <DeleteButton\r\n                onClick={event => {\r\n                  event.stopPropagation();\r\n                  history.goBack();\r\n\r\n                  setTimeout(() => {\r\n                    currentChecks.forEach(check => {\r\n                      dispatch(deleteCheck(check.id));\r\n                    });\r\n\r\n                    dispatch(deleteCard(card.id));\r\n                  }, 50);\r\n                }}\r\n              >\r\n                (Delete)\r\n              </DeleteButton>\r\n            </ListName>\r\n          </NameWrapper>\r\n          <CloseIcon\r\n            icon={faTimes}\r\n            onClick={() => {\r\n              send(\"IDLE\");\r\n              history.goBack();\r\n            }}\r\n          />\r\n        </Header>\r\n        <Section>\r\n          <SectionHeader>\r\n            <Icon icon={faList} />\r\n            <Subtitle>Description</Subtitle>\r\n          </SectionHeader>\r\n          <EditWrapper>\r\n            {current.matches(\"updateCardDescription\") ? (\r\n              <>\r\n                <Textarea\r\n                  ref={refInputDescription}\r\n                  placeholder=\"Enter a description...\"\r\n                  value={newDescription}\r\n                  onClick={event => event.stopPropagation()}\r\n                  onChange={event => setNewDescription(event.target.value)}\r\n                  onKeyDown={event => {\r\n                    const isEscapePressed = event.keyCode === 27;\r\n\r\n                    if (isEscapePressed) {\r\n                      setNewDescription(card.description);\r\n                      send(\"IDLE\");\r\n                    }\r\n                  }}\r\n                />\r\n                <Row>\r\n                  <ApplyButton\r\n                    label=\"Apply\"\r\n                    onClick={event => {\r\n                      event.stopPropagation();\r\n                      dispatch(\r\n                        updateCard(card.id, { description: newDescription })\r\n                      );\r\n                      send(\"IDLE\");\r\n                    }}\r\n                  />\r\n                  <Button\r\n                    label=\"Cancel\"\r\n                    color=\"#e74c3c\"\r\n                    onClick={event => {\r\n                      event.stopPropagation();\r\n                      setNewDescription(card.description);\r\n                      send(\"IDLE\");\r\n                    }}\r\n                  />\r\n                </Row>\r\n              </>\r\n            ) : (\r\n              <Description\r\n                onClick={event => {\r\n                  event.stopPropagation();\r\n                  send(\"UPDATE_CARD_DESCRIPTION\");\r\n                }}\r\n                isEmpty={!card.description}\r\n              >\r\n                {card.description || \"Enter a description...\"}\r\n              </Description>\r\n            )}\r\n          </EditWrapper>\r\n        </Section>\r\n        <Section>\r\n          <SectionHeader>\r\n            <Icon icon={faCheckSquare} />\r\n            <Subtitle>Checklist</Subtitle>\r\n          </SectionHeader>\r\n          <Progress value={progress} />\r\n          <DragDropContext onDragEnd={reorder}>\r\n            <Droppable droppableId={card.id} direction=\"vertical\" type=\"CHECK\">\r\n              {provided => (\r\n                <div ref={provided.innerRef} {...provided.droppableProps}>\r\n                  {currentChecks.map(check => (\r\n                    <Check\r\n                      key={check.id}\r\n                      id={check.id}\r\n                      index={check.index}\r\n                      label={check.label}\r\n                      isChecked={check.isChecked}\r\n                      onClickCheck={() => {\r\n                        dispatch(\r\n                          updateCheck(check.id, { isChecked: !check.isChecked })\r\n                        );\r\n                      }}\r\n                      onClickLabel={() =>\r\n                        send(\"UPDATE_CHECK\", { checkId: check.id })\r\n                      }\r\n                      onClickApplyUpdate={newLabel => {\r\n                        dispatch(updateCheck(check.id, { label: newLabel }));\r\n                        send(\"IDLE\");\r\n                      }}\r\n                      onClickCancelUpdate={() => {\r\n                        setNewCheck(\"\");\r\n                        send(\"IDLE\");\r\n                      }}\r\n                      onClickDelete={() => dispatch(deleteCheck(check.id))}\r\n                      isWillUpdateLabel={\r\n                        current.matches(\"updateCheck\") &&\r\n                        current.context.checkId === check.id\r\n                      }\r\n                    />\r\n                  ))}\r\n                  {provided.placeholder}\r\n                  {current.matches(\"createCheck\") ? (\r\n                    <EditWrapper>\r\n                      <Textarea\r\n                        ref={refInputCheck}\r\n                        height={48}\r\n                        placeholder=\"Add an item\"\r\n                        value={newCheck}\r\n                        onClick={event => event.stopPropagation()}\r\n                        onChange={event => setNewCheck(event.target.value)}\r\n                        onKeyDown={event => {\r\n                          switch (event.keyCode) {\r\n                            case 13: // Enter is pressed\r\n                              dispatch(\r\n                                createCheck({\r\n                                  cardId: card.id,\r\n                                  label: newCheck\r\n                                })\r\n                              );\r\n                              setTimeout(() => setNewCheck(\"\"), 20);\r\n                              break;\r\n\r\n                            case 27: // Escape is pressed\r\n                              setNewCheck(\"\");\r\n                              send(\"IDLE\");\r\n                              break;\r\n\r\n                            default:\r\n                              break;\r\n                          }\r\n                        }}\r\n                      />\r\n                      <Row>\r\n                        <ApplyButton\r\n                          label=\"Apply\"\r\n                          onClick={event => {\r\n                            event.stopPropagation();\r\n                            dispatch(\r\n                              createCheck({ cardId: card.id, label: newCheck })\r\n                            );\r\n                            setTimeout(() => setNewCheck(\"\"), 20);\r\n                          }}\r\n                        />\r\n                        <Button\r\n                          label=\"Cancel\"\r\n                          color=\"#e74c3c\"\r\n                          onClick={event => {\r\n                            event.stopPropagation();\r\n                            setNewCheck(\"\");\r\n                            send(\"IDLE\");\r\n                          }}\r\n                        />\r\n                      </Row>\r\n                    </EditWrapper>\r\n                  ) : (\r\n                    <AddCheckButton\r\n                      label=\"Add an item\"\r\n                      color=\"#34495e\"\r\n                      onClick={event => {\r\n                        event.stopPropagation();\r\n                        send(\"CREATE_CHECK\");\r\n                      }}\r\n                    />\r\n                  )}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </DragDropContext>\r\n        </Section>\r\n      </Container>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CardDetail;\r\n","import arrayMove from \"array-move\";\r\n\r\nimport {\r\n  CREATE_BOARD,\r\n  UPDATE_BOARD,\r\n  DELETE_BOARD,\r\n  CREATE_LIST,\r\n  UPDATE_LIST,\r\n  DELETE_LIST,\r\n  CREATE_CARD,\r\n  UPDATE_CARD,\r\n  DELETE_CARD,\r\n  CREATE_CHECK,\r\n  UPDATE_CHECK,\r\n  DELETE_CHECK,\r\n  MOVE_CARD,\r\n  MOVE_LIST,\r\n  MOVE_CHECK\r\n} from \"./actions\";\r\n\r\nexport const boards = (state = [], action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case CREATE_BOARD:\r\n      return [...state, payload];\r\n\r\n    case UPDATE_BOARD:\r\n      return state.map(item => {\r\n        if (item.id === payload.id) {\r\n          return { ...item, name: payload.name };\r\n        }\r\n\r\n        return item;\r\n      });\r\n\r\n    case DELETE_BOARD:\r\n      return state.filter(item => item.id !== payload);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const lists = (state = [], action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case CREATE_LIST:\r\n      payload.index = state.filter(\r\n        item => item.boardId === payload.boardId\r\n      ).length;\r\n\r\n      return [...state, payload];\r\n\r\n    case UPDATE_LIST:\r\n      return state.map(item => {\r\n        if (item.id === payload.id) {\r\n          return { ...item, ...payload.data };\r\n        }\r\n\r\n        return item;\r\n      });\r\n\r\n    case MOVE_LIST:\r\n      return (() => {\r\n        const { index: newIndex } = payload.data;\r\n\r\n        const list = state.find(item => item.id === payload.id);\r\n        const lists = state.filter(item => item.boardId === list.boardId);\r\n        const oldIndex = list.index;\r\n        const movedCards = arrayMove(lists, oldIndex, newIndex);\r\n\r\n        const sortedCards = movedCards.map((list, index) => ({\r\n          ...list,\r\n          index\r\n        }));\r\n\r\n        const result = state\r\n          .filter(item => item.boardId !== list.boardId)\r\n          .concat(sortedCards);\r\n\r\n        return result;\r\n      })();\r\n\r\n    case DELETE_LIST:\r\n      return (() => {\r\n        const afterDeletedLists = state.filter(item => item.id !== payload);\r\n        const list = state.find(item => item.id === payload);\r\n\r\n        const sortedLists = afterDeletedLists\r\n          .filter(item => item.boardId === list.boardId)\r\n          .map((item, index) => ({ ...item, index }))\r\n          .sort((a, b) => a.index - b.index);\r\n\r\n        const result = afterDeletedLists\r\n          .filter(item => item.boardId !== list.boardId)\r\n          .concat(sortedLists);\r\n\r\n        return result;\r\n      })();\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const cards = (state = [], action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case CREATE_CARD:\r\n      payload.index = state.filter(\r\n        item => item.listId === payload.listId\r\n      ).length;\r\n\r\n      return [...state, payload];\r\n\r\n    case UPDATE_CARD:\r\n      return state.map(item => {\r\n        if (item.id === payload.id) {\r\n          return { ...item, ...payload.data };\r\n        }\r\n\r\n        return item;\r\n      });\r\n\r\n    case MOVE_CARD:\r\n      return (() => {\r\n        const withIndex = (card, index) => ({\r\n          ...card,\r\n          index\r\n        });\r\n\r\n        const { listId: newListId, index: newIndex } = payload.data;\r\n        const isMoveToOtherList = newListId !== undefined;\r\n\r\n        if (isMoveToOtherList) {\r\n          const byListId = listId => item => item.listId === listId;\r\n\r\n          const card = state.find(item => item.id === payload.id);\r\n          const oldListId = card.listId;\r\n          const sourceCards = state.filter(byListId(oldListId));\r\n          const destinationCards = state.filter(byListId(newListId));\r\n\r\n          const newSourceCards = sourceCards\r\n            .filter(item => item.id !== card.id)\r\n            .map(withIndex);\r\n\r\n          const newDestinationCards = [\r\n            ...destinationCards.slice(0, newIndex),\r\n            { ...card, listId: newListId },\r\n            ...destinationCards.slice(newIndex)\r\n          ].map(withIndex);\r\n\r\n          const result = state\r\n            .filter(\r\n              item => item.listId !== oldListId && item.listId !== newListId\r\n            )\r\n            .concat([...newSourceCards, ...newDestinationCards]);\r\n\r\n          return result;\r\n        } else {\r\n          const card = state.find(item => item.id === payload.id);\r\n          const cards = state.filter(item => item.listId === card.listId);\r\n          const oldIndex = card.index;\r\n          const movedCards = arrayMove(cards, oldIndex, newIndex);\r\n          const sortedCards = movedCards.map(withIndex);\r\n\r\n          const result = state\r\n            .filter(item => item.listId !== card.listId)\r\n            .concat(sortedCards);\r\n\r\n          return result;\r\n        }\r\n      })();\r\n\r\n    case DELETE_CARD:\r\n      return (() => {\r\n        const afterDeletedCards = state.filter(item => item.id !== payload);\r\n        const card = state.find(item => item.id === payload);\r\n\r\n        const sortedCards = afterDeletedCards\r\n          .filter(item => item.listId === card.listId)\r\n          .map((item, index) => ({ ...item, index }))\r\n          .sort((a, b) => a.index - b.index);\r\n\r\n        const result = afterDeletedCards\r\n          .filter(item => item.listId !== card.listId)\r\n          .concat(sortedCards);\r\n\r\n        return result;\r\n      })();\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const checks = (state = [], action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case CREATE_CHECK:\r\n      payload.index = state.filter(\r\n        item => item.cardId === payload.cardId\r\n      ).length;\r\n\r\n      return [...state, payload];\r\n\r\n    case UPDATE_CHECK:\r\n      return state.map(item => {\r\n        if (item.id === payload.id) {\r\n          return { ...item, ...payload.data };\r\n        }\r\n\r\n        return item;\r\n      });\r\n\r\n    case MOVE_CHECK:\r\n      return (() => {\r\n        const { index: newIndex } = payload.data;\r\n\r\n        const check = state.find(item => item.id === payload.id);\r\n        const checks = state.filter(item => item.cardId === check.cardId);\r\n        const oldIndex = check.index;\r\n        const movedChecks = arrayMove(checks, oldIndex, newIndex);\r\n\r\n        const sortedChecks = movedChecks.map((check, index) => ({\r\n          ...check,\r\n          index\r\n        }));\r\n\r\n        const result = state\r\n          .filter(item => item.cardId !== check.cardId)\r\n          .concat(sortedChecks);\r\n\r\n        return result;\r\n      })();\r\n\r\n    case DELETE_CHECK:\r\n      return (() => {\r\n        const afterDeletedChecks = state.filter(item => item.id !== payload);\r\n        const check = state.find(item => item.id === payload);\r\n\r\n        const sortedChecks = afterDeletedChecks\r\n          .filter(item => item.cardId === check.cardId)\r\n          .map((item, index) => ({ ...item, index }))\r\n          .sort((a, b) => a.index - b.index);\r\n\r\n        const result = afterDeletedChecks\r\n          .filter(item => item.cardId !== check.cardId)\r\n          .concat(sortedChecks);\r\n\r\n        return result;\r\n      })();\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nimport * as reducers from \"./reducers\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage\r\n};\r\n\r\nconst rootReducer = combineReducers(reducers);\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = createStore(persistedReducer);\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport Home from \"./pages/Home\";\r\nimport BoardDetail from \"./pages/BoardDetail\";\r\nimport CardDetail from \"./pages/CardDetail\";\r\nimport { store } from \"./store/store\";\r\n\r\nconst App = () => (\r\n  <Provider store={store}>\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Switch>\r\n        <Route path=\"/:boardSlug\">\r\n          <BoardDetail />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Home />\r\n        </Route>\r\n      </Switch>\r\n      <Route path=\"/:boardSlug/:cardSlug\">\r\n        <CardDetail />\r\n      </Route>\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"typeface-roboto\";\r\nimport \"normalize.css\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}